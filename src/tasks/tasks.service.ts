import { Injectable, Logger } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { GamesService } from '../games/games.service';

@Injectable()
export class TasksService {
  private readonly logger = new Logger(TasksService.name);

  constructor(private readonly gamesService: GamesService) {}

  /**
   * Cron job que se ejecuta cada 5 minutos para limpiar
   * los collaborative attempts expirados
   */
  @Cron(CronExpression.EVERY_5_MINUTES, {
    name: 'cleanup-expired-attempts',
    timeZone: 'America/Bogota', // Ajusta seg√∫n tu zona horaria
  })
  async handleExpiredCollaborativeAttempts(): Promise<void> {
    this.logger.log('üßπ Iniciando limpieza de collaborative attempts expirados...');
    
    try {
      const startTime = Date.now();
      
      // Llamar al m√©todo de limpieza del games service
      const cleanupResult = await this.gamesService.cleanupExpiredCollaborativeAttempts();
      
      const endTime = Date.now();
      const executionTime = endTime - startTime;
      
      if (cleanupResult && cleanupResult.deletedCount > 0) {
        this.logger.log(
          `‚úÖ Limpieza completada exitosamente: ${cleanupResult.deletedCount} registros eliminados en ${executionTime}ms`
        );
      } else {
        this.logger.log(
          `‚ÑπÔ∏è Limpieza completada: No se encontraron registros expirados (${executionTime}ms)`
        );
      }
      
    } catch (error) {
      this.logger.error(
        '‚ùå Error durante la limpieza de collaborative attempts expirados:',
        error.stack
      );
      
      // Opcional: Aqu√≠ podr√≠as enviar una notificaci√≥n o alerta
      // await this.sendErrorNotification(error);
    }
  }

  /**
   * M√©todo manual para ejecutar la limpieza (√∫til para testing o administraci√≥n)
   */
  async manualCleanup(): Promise<any> {
    this.logger.log('üîß Ejecutando limpieza manual de collaborative attempts expirados...');
    
    try {
      const result = await this.gamesService.cleanupExpiredCollaborativeAttempts();
      this.logger.log(`‚úÖ Limpieza manual completada: ${result?.deletedCount || 0} registros procesados`);
      return result;
    } catch (error) {
      this.logger.error('‚ùå Error en limpieza manual:', error.stack);
      throw error;
    }
  }

  /**
   * M√©todo para obtener estad√≠sticas de los cron jobs
   */
  getCleanupStats(): any {
    return {
      jobName: 'cleanup-expired-attempts',
      schedule: 'Every 5 minutes',
      cronExpression: CronExpression.EVERY_5_MINUTES,
      timeZone: 'America/Bogota',
      status: 'active'
    };
  }

  /**
   * M√©todo opcional para enviar notificaciones de error
   * Puedes implementar integraci√≥n con Slack, email, etc.
   */
  private async sendErrorNotification(error: Error): Promise<void> {
    // Implementar seg√∫n tus necesidades
    // Ejemplo: env√≠o a Slack, email, sistema de monitoreo, etc.
    this.logger.warn('‚ö†Ô∏è Considera implementar notificaciones de error para producci√≥n');
  }
}